package thundertactics.mop;

import thundertactics.logic.Player;


TestPosition(Player p){
	float x,y,xnew,ynew;
	boolean wasMoving;
	long time,newtime;
	long deltaTime;
	public double distance(float x1,float y1,float x2,float y2){
		float xd = (x1-x2)*(x1-x2);
		float yd = (y1-y2)*(y1-y2);
		return Math.sqrt(xd+yd);
	}
	public double maxDistance(){
		// 50/second - in client it is 30 (50 for lagging problems..)
		return 5 * this.deltaTime / 100000000;
	}
	public boolean testCondition(Player p){
		xnew = p.getLocation().x;
		ynew = p.getLocation().y;
		this.newtime = System.nanoTime();
		this.deltaTime = this.newtime - this.time;
		boolean ret = distance(x,y,xnew,ynew) < maxDistance();
		this.time = newtime;
		wasMoving = p.getLocation().moving;
		return !ret;
	}
	event beforeSetPosition before(Player p) :
	call(* Player.setLocation(float, float, ..)) && target(p) {
      this.x = p.getLocation().x;
      this.y = p.getLocation().y;
      // if it wasn't moving last time, this means  we should allow him to move only maximum for last second..
      if(!wasMoving) this.time = System.nanoTime()- 300000000;
    }
	event legalMove after(Player p) :
	call(* Player.setLocation(float, float,..)) && target(p) && condition(testCondition(p)) {
	}
	
	ptltl : legalMove implies beforeSetPosition
	
	@violation{
		System.err.println("Possible moving cheat at: "+p.getName() +"\r\n\t\tlastPosition: ("+x+","+y+")" + "\r\n\t\tnewPosition: ("+xnew+","+ynew+")\r\n\t\tdeltaTime: " + (deltaTime/1000000.0) + " millis\r\n\t\tdistance: " + distance(x,y,xnew,ynew) + "\r\n\t\tmaxDistance: "+maxDistance()); 
	}
	

}




